/**
 * Localization Module
 * 
 * Provides translation support for multiple languages
 */
export class Localization {
    constructor() {
        this.translations = {
            en: {
                // General UI
                appTitle: "Memory Remains",
                back: "Back",
                apply: "Apply",
                cancel: "Cancel",
                search: "Search files...",
                path: "Path",
                root: "root",

                // File explorer
                noItemsSelected: "No items selected",
                selectedFiles: "Selected <strong>{0}</strong> {1}",
                filesLabel: "file",
                filesLabelPlural: "files",
                fromFolders: "from <strong>{0}</strong> {1}",
                folderLabel: "folder",
                folderLabelPlural: "folders",
                emptyFolder: "Empty folder",
                selectFileMessage: "Select this file to include all cards",
                previewHeader: "This file contains {0} card(s):",
                noCards: "No card sections found in this file",

                // Card system
                showAnswer: "Show Answer",
                easy: "Easy",
                medium: "Medium",
                hard: "Hard",
                cardsProgress: "{0}/{1} cards",
                srsProgress: "{0} of {1} cards due for review",
                sessionComplete: "Session Complete",
                noCardsAvailable: "No cards available",
                goBackSelectFiles: "Please go back and select content files",
                allCardsScheduled: "All cards are scheduled for future review.",
                resetAllSrs: "Reset All SRS Data",
                nextReview: "Next review",
                interval: "Interval",
                days: "days",

                // Session stats
                congratulations: "üéâ Congratulations! üéâ",
                masteredCards: "You have mastered all the cards in this session.",
                reviewedCards: "Reviewed cards:",
                timeSpent: "Time spent:",
                markedEasy: "Marked as easy:",
                markedMedium: "Marked as medium:",
                markedHard: "Marked as hard:",
                startNewSession: "Start New Session",

                // Chat
                chatTitle: "Chat about: {0}",
                chatPlaceholder: "Type your message...",
                send: "Send",
                chatWithLlm: "Chat with LLM",
                learnCards: "Learn Cards",
                backToFileExplorer: "Back to File Explorer",
                whatToDo: "What would you like to do?",
                generateCards: "Generate Similar Cards",
                generateCardsPrompt: "Generate 10 more language cards similar to the ones in the content. Use the exact same format and languages as the example content.",
                explainGrammar: "Explain Grammar Rules",
                explainGrammarPrompt: "Explain the grammar rules related to the content I'm studying. Focus on the patterns shown in the examples.",
                practiceExercises: "Create Practice Exercises",
                practiceExercisesPrompt: "Create 5 practice exercises using the vocabulary and grammar from the examples that will help me master their usage.",
                usageExamples: "Get Usage Examples",
                usageExamplesPrompt: "For each term in the content, provide 2 additional example sentences showing how to use it in different contexts.",
                apiError: "There was an error connecting to the AI service. Please try again later.",
                generationError: "Sorry, I couldn't generate a response. Please try again.",

                // Settings
                settings: "Settings",
                appearance: "Appearance",
                lightMode: "Light Mode",
                cardBehavior: "Card Behavior",
                shuffleCards: "Shuffle Cards",
                shuffleDescription: "Randomizes card order to prevent sequence-based memorization.",
                reversedMode: "Reversed Mode",
                reversedDescription: "Swaps questions and answers for bidirectional learning.",
                studyOptions: "Study Options",
                enableSrs: "Enable Spaced Repetition",
                srsDescription: "Uses intelligent algorithm to optimize review intervals.",
                maxCards: "Max Cards:",
                maxCardsDescription: "Limit the number of cards (0 = no limit).",
                filterByTags: "Filter by Tags",
                searchTags: "Type to search tags...",
                matchAnyTag: "Match any tag",
                matchAllTags: "Match all tags",
                filterTagsDescription: "Filter cards by tags. Type to see available options.",
                language: "Language",
                languageDescription: "Change the interface language.",
            },
            de: {
                // General UI
                appTitle: "Memory Remains",
                back: "Zur√ºck",
                apply: "Anwenden",
                cancel: "Abbrechen",
                search: "Dateien suchen...",
                path: "Pfad",
                root: "Stammverzeichnis",

                // File explorer
                noItemsSelected: "Keine Elemente ausgew√§hlt",
                selectedFiles: "<strong>{0}</strong> {1} ausgew√§hlt",
                filesLabel: "Datei",
                filesLabelPlural: "Dateien",
                fromFolders: "aus <strong>{0}</strong> {1}",
                folderLabel: "Ordner",
                folderLabelPlural: "Ordnern",
                emptyFolder: "Leerer Ordner",
                selectFileMessage: "W√§hlen Sie diese Datei aus, um alle Karten einzuschlie√üen",
                previewHeader: "Diese Datei enth√§lt {0} Karte(n):",
                noCards: "Keine Kartenabschnitte in dieser Datei gefunden",

                // Card system
                showAnswer: "Antwort zeigen",
                easy: "Einfach",
                medium: "Mittel",
                hard: "Schwer",
                cardsProgress: "{0}/{1} Karten",
                srsProgress: "{0} von {1} Karten zur √úberpr√ºfung f√§llig",
                sessionComplete: "Sitzung abgeschlossen",
                noCardsAvailable: "Keine Karten verf√ºgbar",
                goBackSelectFiles: "Bitte gehen Sie zur√ºck und w√§hlen Sie Inhaltsdateien aus",
                allCardsScheduled: "Alle Karten sind f√ºr die zuk√ºnftige √úberpr√ºfung geplant.",
                resetAllSrs: "Alle SRS-Daten zur√ºcksetzen",
                nextReview: "N√§chste √úberpr√ºfung",
                interval: "Intervall",
                days: "Tage",

                // Session stats
                congratulations: "üéâ Herzlichen Gl√ºckwunsch! üéâ",
                masteredCards: "Sie haben alle Karten in dieser Sitzung gemeistert.",
                reviewedCards: "√úberpr√ºfte Karten:",
                timeSpent: "Aufgewendete Zeit:",
                markedEasy: "Als einfach markiert:",
                markedMedium: "Als mittel markiert:",
                markedHard: "Als schwer markiert:",
                startNewSession: "Neue Sitzung starten",

                // Chat
                chatTitle: "Chat √ºber: {0}",
                chatPlaceholder: "Nachricht eingeben...",
                send: "Senden",
                chatWithLlm: "Mit LLM chatten",
                learnCards: "Karten lernen",
                backToFileExplorer: "Zur√ºck zum Datei-Explorer",
                whatToDo: "Was m√∂chten Sie tun?",
                generateCards: "√Ñhnliche Karten generieren",
                generateCardsPrompt: "Erstelle 10 weitere Sprachkarten √§hnlich zu denen im vorhandenen Inhalt. Verwende genau das gleiche Format und die gleichen Sprachen wie im Beispielinhalt.",
                explainGrammar: "Grammatikregeln erkl√§ren",
                explainGrammarPrompt: "Erkl√§re die Grammatikregeln, die sich auf den Inhalt beziehen, den ich lerne. Konzentriere dich auf die Muster, die in den Beispielen gezeigt werden.",
                practiceExercises: "√úbungen erstellen",
                practiceExercisesPrompt: "Erstelle 5 √úbungsaufgaben mit dem Vokabular und der Grammatik aus den Beispielen, die mir helfen werden, deren Verwendung zu meistern.",
                usageExamples: "Verwendungsbeispiele erhalten",
                usageExamplesPrompt: "Gib f√ºr jeden Begriff im Inhalt 2 zus√§tzliche Beispiels√§tze, die zeigen, wie man ihn in verschiedenen Kontexten verwendet.",
                apiError: "Es gab einen Fehler bei der Verbindung zum KI-Dienst. Bitte versuchen Sie es sp√§ter erneut.",
                generationError: "Entschuldigung, ich konnte keine Antwort generieren. Bitte versuchen Sie es erneut.",

                // Settings
                settings: "Einstellungen",
                appearance: "Aussehen",
                lightMode: "Licht-Modus",
                cardBehavior: "Kartenverhalten",
                shuffleCards: "Karten mischen",
                shuffleDescription: "Randomisiert die Kartenreihenfolge, um sequenzbasiertes Auswendiglernen zu verhindern.",
                reversedMode: "Umgekehrter Modus",
                reversedDescription: "Tauscht Fragen und Antworten f√ºr bidirektionales Lernen.",
                studyOptions: "Lernoptionen",
                enableSrs: "Aktiviere Spaced Repetition",
                srsDescription: "Verwendet einen intelligenten Algorithmus zur Optimierung der Wiederholungsintervalle.",
                maxCards: "Max. Karten:",
                maxCardsDescription: "Begrenzt die Anzahl der Karten (0 = keine Begrenzung).",
                filterByTags: "Nach Tags filtern",
                searchTags: "Tippen, um nach Tags zu suchen...",
                matchAnyTag: "Beliebigen Tag abgleichen",
                matchAllTags: "Alle Tags abgleichen",
                filterTagsDescription: "Filtere Karten nach Tags. Tippe, um verf√ºgbare Optionen zu sehen.",
                language: "Sprache",
                languageDescription: "√Ñndere die Benutzeroberfl√§chen-Sprache.",
            },
            ru: {
                // General UI
                appTitle: "Memory Remains",
                back: "–ù–∞–∑–∞–¥",
                apply: "–ü—Ä–∏–º–µ–Ω–∏—Ç—å",
                cancel: "–û—Ç–º–µ–Ω–∞",
                search: "–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤...",
                path: "–ü—É—Ç—å",
                root: "–∫–æ—Ä–µ–Ω—å",

                // File explorer
                noItemsSelected: "–≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã",
                selectedFiles: "–í—ã–±—Ä–∞–Ω–æ <strong>{0}</strong> {1}",
                filesLabel: "—Ñ–∞–π–ª",
                filesLabelPlural: "—Ñ–∞–π–ª–æ–≤",
                fromFolders: "–∏–∑ <strong>{0}</strong> {1}",
                folderLabel: "–ø–∞–ø–∫–∏",
                folderLabelPlural: "–ø–∞–ø–æ–∫",
                emptyFolder: "–ü—É—Å—Ç–∞—è –ø–∞–ø–∫–∞",
                selectFileMessage: "–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏",
                previewHeader: "–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {0} –∫–∞—Ä—Ç–æ—á–µ–∫:",
                noCards: "–í —ç—Ç–æ–º —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–∑–¥–µ–ª–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫",

                // Card system
                showAnswer: "–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç",
                easy: "–õ–µ–≥–∫–æ",
                medium: "–°—Ä–µ–¥–Ω–µ",
                hard: "–¢—Ä—É–¥–Ω–æ",
                cardsProgress: "{0}/{1} –∫–∞—Ä—Ç–æ—á–µ–∫",
                srsProgress: "{0} –∏–∑ {1} –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è",
                sessionComplete: "–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                noCardsAvailable: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫",
                goBackSelectFiles: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ",
                allCardsScheduled: "–í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –±—É–¥—É—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.",
                resetAllSrs: "–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ SRS",
                nextReview: "–°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ",
                interval: "–ò–Ω—Ç–µ—Ä–≤–∞–ª",
                days: "–¥–Ω–µ–π",

                // Session stats
                congratulations: "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ",
                masteredCards: "–í—ã –æ—Å–≤–æ–∏–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏.",
                reviewedCards: "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫:",
                timeSpent: "–ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:",
                markedEasy: "–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ª–µ–≥–∫–æ:",
                markedMedium: "–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ:",
                markedHard: "–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —Ç—Ä—É–¥–Ω–æ:",
                startNewSession: "–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é",

                // Chat
                chatTitle: "–ß–∞—Ç –æ: {0}",
                chatPlaceholder: "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...",
                send: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
                chatWithLlm: "–ß–∞—Ç —Å LLM",
                learnCards: "–£—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏",
                backToFileExplorer: "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ñ–∞–π–ª–æ–≤–æ–º—É –ø—Ä–æ–≤–æ–¥–Ω–∏–∫—É",
                whatToDo: "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?",
                generateCards: "–°–æ–∑–¥–∞—Ç—å –ø–æ—Ö–æ–∂–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏",
                generateCardsPrompt: "–°–æ–∑–¥–∞–π—Ç–µ –µ—â—ë 10 —è–∑—ã–∫–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫, –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ —Ç–µ, —á—Ç–æ –≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–π –∂–µ —Ñ–æ—Ä–º–∞—Ç –∏ —è–∑—ã–∫–∏, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ.",
                explainGrammar: "–û–±—ä—è—Å–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏",
                explainGrammarPrompt: "–û–±—ä—è—Å–Ω–∏—Ç–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä–æ–µ —è –∏–∑—É—á–∞—é. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—è—Ö, –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö.",
                practiceExercises: "–°–æ–∑–¥–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
                practiceExercisesPrompt: "–°–æ–∑–¥–∞–π—Ç–µ 5 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –º–Ω–µ –æ—Å–≤–æ–∏—Ç—å –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.",
                usageExamples: "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
                usageExamplesPrompt: "–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞ –≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ 2 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏—Ö, –∫–∞–∫ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö.",
                apiError: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É –ò–ò. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                generationError: "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",

                // Settings
                settings: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                appearance: "–í–Ω–µ—à–Ω–∏–π –≤–∏–¥",
                lightMode: "–°–≤–µ—Ç–ª—ã–π —Ä–µ–∂–∏–º",
                cardBehavior: "–ü–æ–≤–µ–¥–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫",
                shuffleCards: "–ü–µ—Ä–µ–º–µ—à–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏",
                shuffleDescription: "–†–∞–Ω–¥–æ–º–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.",
                reversedMode: "–û–±—Ä–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º",
                reversedDescription: "–ú–µ–Ω—è–µ—Ç –º–µ—Å—Ç–∞–º–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.",
                studyOptions: "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è",
                enableSrs: "–í–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ",
                srsDescription: "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.",
                maxCards: "–ú–∞–∫—Å. –∫–∞—Ä—Ç–æ—á–µ–∫:",
                maxCardsDescription: "–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ (0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è).",
                filterByTags: "–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–µ–≥–∞–º",
                searchTags: "–í–≤–µ–¥–∏—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–≥–æ–≤...",
                matchAnyTag: "–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ª—é–±—ã–º —Ç–µ–≥–æ–º",
                matchAllTags: "–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ —Ç–µ–≥–∞–º–∏",
                filterTagsDescription: "–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Ç–µ–≥–∞–º. –í–≤–µ–¥–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
                language: "–Ø–∑—ã–∫",
                languageDescription: "–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.",
            }
        };

        // Get stored language preference or default to English
        this.currentLanguage = localStorage.getItem('appLanguage') || 'en';
    }

    /**
     * Get translation for the given key
     * @param {string} key - Translation key
     * @param {...any} args - Optional arguments for formatting
     * @returns {string} - Translated text
     */
    get(key, ...args) {
        const lang = this.currentLanguage;
        let translation = '';

        // Get translation from current language or fallback to English
        if (this.translations[lang] && this.translations[lang][key]) {
            translation = this.translations[lang][key];
        } else if (this.translations['en'] && this.translations['en'][key]) {
            translation = this.translations['en'][key];
        } else {
            console.warn(`Translation missing for key: ${key}`);
            return key; // Return the key as fallback
        }

        // Format the translation if args are provided
        if (args.length > 0) {
            for (let i = 0; i < args.length; i++) {
                translation = translation.replace(`{${i}}`, args[i]);
            }
        }

        return translation;
    }

    /**
     * Change the current language
     * @param {string} language - Language code ('en', 'de', 'ru')
     */
    setLanguage(language) {
        if (this.translations[language]) {
            this.currentLanguage = language;
            localStorage.setItem('appLanguage', language);
            return true;
        }
        return false;
    }

    /**
     * Get current language
     * @returns {string} - Current language code
     */
    getLanguage() {
        return this.currentLanguage;
    }

    /**
     * Get list of available languages
     * @returns {Array<{code: string, name: string}>} - Array of language objects
     */
    getAvailableLanguages() {
        return [
            { code: 'en', name: 'English' },
            { code: 'de', name: 'Deutsch' },
            { code: 'ru', name: '–†—É—Å—Å–∫–∏–π' }
        ];
    }

    /**
     * Update all UI elements with translations
     */
    updateUI() {
        document.title = this.get('appTitle');

        // Update static elements by their IDs
        const elementsToUpdate = {
            'back-button': 'back',
            'search-input': 'search',
            'selection-stats': 'noItemsSelected',
            'chat-llm-button': 'chatWithLlm',
            'continue-button': 'learnCards',
            'show-answer-button': 'showAnswer',
            'back-to-selection': 'back',
            'back-to-file-explorer': 'backToFileExplorer',
            'chat-input': { placeholder: 'chatPlaceholder' },
            'chat-send-button': 'send'
        };

        for (const [id, key] of Object.entries(elementsToUpdate)) {
            const element = document.getElementById(id);
            if (element) {
                if (typeof key === 'string') {
                    element.textContent = this.get(key);
                } else if (typeof key === 'object') {
                    for (const [attr, attrKey] of Object.entries(key)) {
                        element.setAttribute(attr, this.get(attrKey));
                    }
                }
            }
        }

        this.formatPathIndicator();

        // Update difficulty buttons
        const difficultyButtons = document.querySelectorAll('.difficulty-button');
        const difficulties = ['easy', 'medium', 'hard'];
        difficultyButtons.forEach((button, index) => {
            if (index < difficulties.length) {
                button.textContent = this.get(difficulties[index]);
            }
        });

        // Update settings modal
        this.updateSettingsUI();
    }

    /**
     * Format the path indicator text
     */
    formatPathIndicator() {
        const pathIndicator = document.getElementById('path-indicator');

        const currentText = pathIndicator.textContent;
        const pathParts = currentText.split(':');

        if (pathParts.length > 1) {
            const pathValue = pathParts[1].trim();
            if (pathValue === 'root') {
                pathIndicator.textContent = `${this.get('path')}: ${this.get('root')}`;
            } else {
                pathIndicator.textContent = `${this.get('path')}: ${pathValue}`;
            }
        } else {
            pathIndicator.textContent = `${this.get('path')}: ${this.get('root')}`;
        }
    }

    /**
     * Update settings UI with translations
     */
    updateSettingsUI() {
        const settingsElements = {
            // Settings heading
            '#settings-modal .modal-content h2': 'settings',

            // Left column
            '.settings-section h3:nth-of-type(1)': 'appearance',
            '.theme-toggle-container .setting-label': 'lightMode',
            '.settings-section h3:nth-of-type(2)': 'cardBehavior',
            'label[for="shuffle-cards"] .setting-label': 'shuffleCards',
            'label[for="shuffle-cards"] + p': 'shuffleDescription',
            'label[for="reversed-mode"] .setting-label': 'reversedMode',
            'label[for="reversed-mode"] + p': 'reversedDescription',

            // Right column
            '.settings-column:nth-child(2) .settings-section h3': 'studyOptions',
            'label[for="srs-mode"] .setting-label': 'enableSrs',
            'label[for="srs-mode"] + p': 'srsDescription',
            'label[for="max-cards"]': 'maxCards',
            '#max-cards-container + p': 'maxCardsDescription',

            // Tags section
            '#tag-filter-container h3': 'filterByTags',
            '#tag-filter': { placeholder: 'searchTags' },
            '.filter-rule-container label:nth-child(1) span': 'matchAnyTag',
            '.filter-rule-container label:nth-child(2) span': 'matchAllTags',
            '#tag-filter-container p.settings-description': 'filterTagsDescription',

            // Language section (if it exists)
            '#language-section h3': 'language',
            '#language-section p': 'languageDescription',

            // Buttons
            '#apply-settings': 'apply',
            '#close-settings': 'cancel',
        };

        // Update elements
        for (const [selector, key] of Object.entries(settingsElements)) {
            const elements = document.querySelectorAll(selector);
            elements.forEach(element => {
                if (typeof key === 'string') {
                    element.textContent = this.get(key);
                } else if (typeof key === 'object') {
                    for (const [attr, attrKey] of Object.entries(key)) {
                        element.setAttribute(attr, this.get(attrKey));
                    }
                }
            });
        }
    }
}

// Create and export a singleton instance
export const i18n = new Localization();